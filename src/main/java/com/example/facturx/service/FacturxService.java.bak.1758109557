package com.example.facturx.service;

import com.example.facturx.model.InvoiceDTO;
import org.mustangproject.*;
import org.mustangproject.ZUGFeRD.*;
import org.springframework.stereotype.Service;

import java.io.*;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@Service
public class FacturxService {

  private static final SimpleDateFormat DF = new SimpleDateFormat("yyyy-MM-dd");

  private static Date d(String s) throws ParseException {
    return (s == null || s.isEmpty()) ? null : DF.parse(s);
  }

  public byte[] buildFacturX(InvoiceDTO dto, byte[] sourcePdf, String embeddedXmlName) throws Exception {
    // 1) Upload-PDF in eine Temp-Datei schreiben (Exporter erwartet einen Dateipfad)
    Path tmp = Files.createTempFile("booqable_", ".pdf");
    Files.write(tmp, sourcePdf);

    try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {

      //    Hinweis: bei echten Non-PDFA-Quellen kannst du .ignorePDFAErrors() nutzen.
      // 2) Exporter vorbereiten – A3 ist toleranter bei Nicht-PDF/A-Quellen
      IZUGFeRDExporter ze = new ZUGFeRDExporterFromA3()
          .load(tmp.toString())            // <- MUSS zuerst kommen
          .setZUGFeRDVersion(2)
	  .setProducer("FacturX-Converter")
	  .setCreator("Mustangproject");

      // 3) Invoice-Objekt befüllen (Mustang 2.19 API)
      Invoice inv = new Invoice();

      // Sender (seller)
      TradeParty seller = new TradeParty(dto.seller.name, dto.seller.street, dto.seller.zip, dto.seller.city, dto.seller.country);
      if (dto.seller.vatId != null && !dto.seller.vatId.isEmpty()) seller.addVATID(dto.seller.vatId);
      if (dto.seller.taxNumber != null && !dto.seller.taxNumber.isEmpty()) seller.addTaxID(dto.seller.taxNumber);
      if (dto.seller.iban != null && !dto.seller.iban.isEmpty()) {
        // BIC optional
        seller.addBankDetails(new BankDetails(dto.seller.iban, dto.seller.bic));
      }
      inv.setSender(seller);

      // Empfänger (buyer)
      TradeParty buyer = new TradeParty(dto.buyer.name, dto.buyer.street, dto.buyer.zip, dto.buyer.city, dto.buyer.country);
      if (dto.buyer.vatId != null && !dto.buyer.vatId.isEmpty()) buyer.addVATID(dto.buyer.vatId);
      inv.setRecipient(buyer);

      // Metadaten
      inv.setNumber(dto.header.number);
      Date issue = d(dto.header.issue_date);
      if (issue != null) inv.setIssueDate(issue);
      Date due = d(dto.header.due_date);
      if (due != null) inv.setDueDate(due);

      // Leistungszeitraum/-datum
      Date from = d(dto.header.service_from);
      Date to = d(dto.header.service_to);
      if (from != null && to != null) {
        inv.setDetailedDeliveryPeriod(from, to);
      } else if (from != null) {
        inv.setDeliveryDate(from);
      }

      // Positionen: Product(name, "", unitCode, VAT%) ; Item(product, qty, netUnitPrice)
      for (InvoiceDTO.Line l : dto.lines) {
        BigDecimal qty = new BigDecimal(l.quantity);
        BigDecimal netUnit = l.unitNetPriceBD();
        BigDecimal vat = new BigDecimal(l.taxRate); // z.B. 19

        Product product = new Product(l.description, "", l.unitCode, vat);
        Item item = new Item(product, qty, netUnit);
        inv.addItem(item);
      }

      // Optional: Referenz / Buyer Reference / Leitweg-ID
      if (dto.buyer.buyerReference != null && !dto.buyer.buyerReference.isEmpty()) {
        inv.setReferenceNumber(dto.buyer.buyerReference);
      }
      // Zahlungsinfo als Freitext/Verwendungszweck kann in PaymentTerms/Text o.ä. gesetzt werden.
      // (Für Minimalbeispiel lassen wir das weg – Mustang berechnet Summen selbst konsistent.)

      // 4) Transaction setzen und exportieren (in Memory)
      ze.setTransaction(inv);
      ze.export(baos); // schreibt das fertige Factur-X-PDF in den OutputStream

      return baos.toByteArray();
    } finally {
      try { Files.deleteIfExists(tmp); } catch (IOException ignore) {}
    }
  }
}
